generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PROFISSIONAL
  RESPONSAVEL
}




enum Parentesco {
  PAI
  MAE
  AVO
  AVOA
  TIO
  TIA
  TUTOR
  OUTRO
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String? // Removendo @unique para permitir múltiplos nulls
  password  String
  telefone  String?
  endereco  String?
  tipo      UserType
  criado_em DateTime @default(now())

  // Relacionamentos
  criancas     Crianca[]     @relation("ResponsavelCrianças")
  profissional Profissional?

  // Índice único composto para evitar duplicatas, mas permitindo email nulo
  @@unique([email, telefone, name], name: "unique_user_data")
}

model Crianca {
  id                  Int        @id @default(autoincrement())
  nome                String
  data_nascimento     DateTime
  genero              String
  diagnostico         String
  diagnosticoDetalhes String? // Detalhes extras do diagnóstico
  observacoes         String?
  parentesco          Parentesco // Relação do responsável com a criança

  responsavel_id Int
  responsavel    User @relation("ResponsavelCrianças", fields: [responsavel_id], references: [id])

  // Relacionamentos
  sessoes      Sessoes[]
  metas        Meta[]
  prof_crianca ProfissionalCriança[]
}

model Profissional {
  id                    Int    @id @default(autoincrement())
  usuario_id            Int    @unique
  especialidade         String
  registro_profissional String // CRM, CRP, CREFONO, etc.

  usuario User @relation(fields: [usuario_id], references: [id])

  // Relacionamentos
  sessoes      Sessoes[]
  prof_crianca ProfissionalCriança[]
}

model ProfissionalCriança {
  profissional_id Int
  crianca_id      Int

  profissional Profissional @relation(fields: [profissional_id], references: [id])
  crianca      Crianca      @relation(fields: [crianca_id], references: [id])

  @@id([profissional_id, crianca_id])
}

model Sessoes {
  id              Int      @id @default(autoincrement())
  data            DateTime
  descricao       String
  crianca_id      Int
  profissional_id Int

  crianca      Crianca      @relation(fields: [crianca_id], references: [id])
  profissional Profissional @relation(fields: [profissional_id], references: [id])
}

model Meta {
  id          Int      @id @default(autoincrement())
  descricao   String
  crianca_id  Int
  data_inicio DateTime
  data_fim    DateTime

  crianca   Crianca     @relation(fields: [crianca_id], references: [id])
  progresso Progresso[]
}

model Progresso {
  id        Int      @id @default(autoincrement())
  meta_id   Int
  data      DateTime
  descricao String
  status    String

  meta Meta @relation(fields: [meta_id], references: [id])
}

model ConexaoProfissional {
  id                Int           @id @default(autoincrement())
  solicitante_id    Int
  solicitado_id     Int
  status            StatusConexao @default(PENDENTE)
  criado_em         DateTime      @default(now())

  solicitante Profissional @relation("ConexoesEnviadas", fields: [solicitante_id], references: [id])
  solicitado  Profissional @relation("ConexoesRecebidas", fields: [solicitado_id], references: [id])
}

enum StatusConexao {
  PENDENTE
  ACEITO
  RECUSADO
}

