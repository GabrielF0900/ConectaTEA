generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  PROFISSIONAL
  RESPONSAVEL
}


enum PrioridadeMeta {
  BAIXA
  MEDIA
  ALTA
}



enum StatusMeta {
  EM_ANDAMENTO
  VENCENDO
  QUASE_CONCLUIDA
  CONCLUIDA
}

enum CategoriaMeta {
  COMUNICACAO
  SOCIAL
  COGNITIVA
  COMPORTAMENTAL
}

enum Parentesco {
  PAI
  MAE
  AVO
  AVOA
  TIO
  TIA
  TUTOR
  OUTRO
}

enum StatusConexao {
  PENDENTE
  ACEITO
  RECUSADO
}

enum AuditAction {
  CONEXAO_ENVIADA
  CONEXAO_ACEITA
  CONEXAO_RECUSADA
  CONEXAO_REMOVIDA
  PERFIL_ATUALIZADO
  LOGIN
  LOGOUT
}

enum RedeSocialTipo {
  LINKEDIN
  INSTAGRAM
  FACEBOOK
  SITE
  OUTRO
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String?
  password  String
  telefone  String?
  endereco  String?
  tipo      UserType
  criado_em DateTime @default(now())

  // Relacionamentos
  criancas     Crianca[]     @relation("ResponsavelCrian√ßas")
  profissional Profissional?
  auditLogs    AuditLog[]
}

model Crianca {
  id                  Int        @id @default(autoincrement())
  nome                String
  data_nascimento     DateTime
  genero              String
  diagnostico         String
  diagnosticoDetalhes String?
  observacoes         String?
  parentesco          Parentesco

  responsavel_id Int
  responsavel    User @relation("ResponsavelCrian√ßas", fields: [responsavel_id], references: [id])

  // Relacionamentos
  sessoes      Sessoes[]
  metas        Meta[]
  prof_crianca ProfissionalCrian√ßa[]
}

model Profissional {
  id                    Int    @id @default(autoincrement())
  usuario_id            Int    @unique
  especialidade         String
  registro_profissional String

  // üîπ Novos campos para o perfil
  titulo              String? // Ex: "Psic√≥logo Cl√≠nico"
  formacaoAcademica   String? // Ex: "Psicologia - USP"
  sobre               String? // Biografia
  fotoPerfilUrl       String? // URL da foto de perfil
  codigoIdentificacao String? @unique // Ex: "PROF-001"

  usuario User @relation(fields: [usuario_id], references: [id])

  // Relacionamentos
  sessoes           Sessoes[]
  prof_crianca      ProfissionalCrian√ßa[]
  conexoesEnviadas  ConexaoProfissional[]     @relation("ConexoesEnviadas")
  conexoesRecebidas ConexaoProfissional[]     @relation("ConexoesRecebidas")
  locaisAtendimento LocalAtendimento[]
  redesSociais      RedeSocial[]
  areasAtuacao      AreaAtuacaoProfissional[]
}

model LocalAtendimento {
  id              Int          @id @default(autoincrement())
  nome            String
  cidade          String
  profissional_id Int
  profissional    Profissional @relation(fields: [profissional_id], references: [id])
}

model RedeSocial {
  id              Int          @id @default(autoincrement())
  tipo            String // "LinkedIn", "Instagram", "Facebook"
  url             String?
  profissional_id Int
  profissional    Profissional @relation(fields: [profissional_id], references: [id])
}

model AreaAtuacao {
  id   Int    @id @default(autoincrement())
  nome String @unique

  profissionais AreaAtuacaoProfissional[]
}

model AreaAtuacaoProfissional {
  profissional_id Int
  area_id         Int

  profissional Profissional @relation(fields: [profissional_id], references: [id])
  area         AreaAtuacao  @relation(fields: [area_id], references: [id])

  @@id([profissional_id, area_id])
}

model ProfissionalCrian√ßa {
  profissional_id Int
  crianca_id      Int

  profissional Profissional @relation(fields: [profissional_id], references: [id])
  crianca      Crianca      @relation(fields: [crianca_id], references: [id])

  @@id([profissional_id, crianca_id])
}

model ConexaoProfissional {
  id             Int           @id @default(autoincrement())
  solicitante_id Int
  solicitado_id  Int
  status         StatusConexao @default(PENDENTE)
  criado_em      DateTime      @default(now())

  solicitante Profissional @relation("ConexoesEnviadas", fields: [solicitante_id], references: [id])
  solicitado  Profissional @relation("ConexoesRecebidas", fields: [solicitado_id], references: [id])

  // Removida constraint √∫nica para permitir m√∫ltiplas solicita√ß√µes entre os mesmos profissionais
}

model Sessoes {
  id              Int      @id @default(autoincrement())
  data            DateTime
  descricao       String
  crianca_id      Int
  profissional_id Int

  crianca      Crianca      @relation(fields: [crianca_id], references: [id])
  profissional Profissional @relation(fields: [profissional_id], references: [id])
}

model Meta {
  id          Int            @id @default(autoincrement())
  titulo      String
  descricao   String
  categoria   CategoriaMeta
  prioridade  PrioridadeMeta
  status      StatusMeta     @default(EM_ANDAMENTO)
  progresso   Int            @default(0) // porcentagem
  crianca_id  Int
  data_inicio DateTime
  data_fim    DateTime

  crianca   Crianca     @relation(fields: [crianca_id], references: [id])
  updates   Progresso[]
}


model Progresso {
  id        Int      @id @default(autoincrement())
  meta_id   Int
  data      DateTime
  descricao String
  status    String

  meta Meta @relation(fields: [meta_id], references: [id])
}

model AuditLog {
  id        Int         @id @default(autoincrement())
  userId    Int?
  action    AuditAction
  details   String?
  createdAt DateTime    @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([action])
  @@index([createdAt])
}
